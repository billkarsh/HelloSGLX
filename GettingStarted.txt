==================================================
Talking live to SpikeGLX from a remote application
==================================================

You have three options for talking to SpikeGLX from another application or script:

The first two options give you a full-featured and low-latency communications link that lets you do anything, including fetching data in real time:

1. Write a C++ application that incorporates the SpikeGLX-CPP-SDK.
2. Write a MATLAB program that uses the SpikeGLX-MATLAB-SDK.

The last option is much slower and does not support real time data fetching, but it is still very capable and can be used from almost any language/environment:

3. Use the included HelloSGLX app to exchange commands and queries using the Windows shell.

    Your-script <--> HelloSGLX <--> SpikeGLX

The HelloSGLX app is a C++ app that, itself, uses the C++ SDK internally. It is a command-line app. You invoke it by telling the operating system to launch HelloSGLX.exe and send it command-line arguments which describe a single SpikeGLX command or query. This is "slow" because HelloSGLX needs to be launched again for each such command. Nevertheless, it is fast enough to set and get run parameters and to start and stop runs so that SpikeGLX can be integrated into a workflow that is controlled by a single master script.


SpikeGLX Setup
==============

1. Launch SpikeGLX on the data acquisition machine. This machine and the remote client machine must be connected to the same network.

2. Open SpikeGLX dialog 'Options/Command Server Settings...'.

3. Click 'Enable Remote Command Server' and then click 'My Address'.

4. Write down the IP address; you'll need to type that into your remote script.

Note: You can run SpikeGLX and your client application on the same machine, and in this configuration you can either use the computer's actual network address (per step 3), or the 'loopback' address if you don't have a network connection on this computer. Every computer has an internal 'loopback' address set to '127.0.0.1'. Use that with default port number 4142.

Note: If the script times out (about 10 seconds) when trying to connect to SpikeGLX, it may be Windows Firewall blocking access. You can add SpikeGLX to the allowed list of applications by going to the top level of the Windows Control Panel and choosing 'Windows Security/Firewall and network protection/Allow an app through Firewall.' In the Allowed Apps dialog you can then edit the settings for SpikeGLX or add it to the list if necessary.


HelloSGLX Setup
===============

1. Place the folder 'HelloSGLX-win' anywhere. The set of available commands is in the ReadMe.txt file within that folder.

2. Use your favorite scipt platform to send commands. The 'Demos' folder shows you how to do this for Python and for C#.


